# @restroom-mw/db

Is a basic middleware to make basic operations on a database.

Uses [sequelize ORM](https://sequelize.org/) underneath, so accepts the same dialects and supports Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server.

Interpretes the [actions](#actions) to connect to a database, select some value and put into the `DATA` of zenroom and save the result into a the `result` table.

## Usage

```js
import express from "express";
import zencode from "@restroom-mw/core";
import db from "@restroom-mw/db";

const app = express();

app.use(db);
app.use("/api/*", zencode);
```

## Database Setup

To use MySQL, you first need to format a table, with 4 columns, as in the picture:

![](.././images/mysql-db-setup.png)

You can use this code to create the table:

```sql
CREATE TABLE `myTable` (
  `id` int(11) NOT NULL,
  `result` text,
  `createdAt` datetime NOT NULL,
  `updatedAt` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
```

## Zencode examples

The syntax of the actions is [here](https://github.com/dyne/restroom-mw/blob/master/packages/db/src/index.ts#L9-L16).

### Write data to a MySQL database

Use this **Zencode**:

```gherkin
# Here we are loading the name of the table we are writing on, 
# and the URI of the mysql database
# Here we're using a free database from remotemysql.com
Given I have a database uri named 'mysql'
Given I have a database table named 'myTable'

# Here we create an array, just for fun
When I create the array of '8' random objects of '256' bits

# Here we print the output that we want to be stonred in the table.
# If you don't print the output, restroom-mw won't save it in the database
Then print all data

# Here we are asking restroom-mw to store what has just been printed out, into the database
Then I save the 'array' into the database 'mysql' into the table 'myTable'
```

With this **keys**:

```json
{
	"myTable": "firstTable",
	"mysql": "mysql://48Dg7xv6YL:nz6usNgiD1@remotemysql.com:3306/48Dg7xv6YL"
}
```

### Read data to a MySQL database

Use this **Zencode**:

```gherkin
# Here we are loading the name of the table we are writing on, 
# and the URI of the mysql database
# Here we're using a free database from remotemysql.com
Given I have a database uri named 'mysql'
Given I have a database table named 'myTable'

# here we are telling Zenroom to 'allocate' a string dictionary, that 
# we'll use to store the data read from the database
Given I have a 'string dictionary' named 'myResult'

# Here we are reading the record with id '2' of the table and database we declared before
Given I read the record '2' of the table 'myTable' of the database 'mysql' and save the result into 'myResult'

# the value of the record could be 0 to max could be 

Then print 'myResult'
```

With this **keys**:

```json
{
	"myTable": "firstTable",
	"myCache": "firstCache",
	"mysql": "mysql://48Dg7xv6YL:nz6usNgiD1@remotemysql.com:3306/48Dg7xv6YL"
}
```

## API

<!-- Generated by documentation.js. Update this documentation by updating the source code. -->

#### Table of Contents

*   [ACTIONS](#actions)
    *   [GET_URI_KEYS](#get_uri_keys)
        *   [Parameters](#parameters)
        *   [Examples](#examples)
    *   [GET_TABLE_KEYS](#get_table_keys)
        *   [Parameters](#parameters-1)
    *   [GET_RECORD](#get_record)
        *   [Parameters](#parameters-2)
    *   [EXECUTE_SQL](#execute_sql)
        *   [Parameters](#parameters-3)
    *   [EXECUTE_SQL_WITH_PARAMS](#execute_sql_with_params)
        *   [Parameters](#parameters-4)
    *   [SAVE_OUTPUT](#save_output)
        *   [Parameters](#parameters-5)
    *   [SAVE_VAR](#save_var)
        *   [Parameters](#parameters-6)

### ACTIONS

[packages/db/src/index.ts:18-80](https://github.com/albertolerda/restroom-mw/blob/8bcf193be31549f8b5764f826d90bc30406c8b1a/packages/db/src/index.ts#L18-L80 "Source code on GitHub")

Available actions for the @restroom-mw/db  database middleware

Type: [number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)

#### GET_URI_KEYS

[packages/db/src/index.ts:31-31](https://github.com/albertolerda/restroom-mw/blob/8bcf193be31549f8b5764f826d90bc30406c8b1a/packages/db/src/index.ts#L31-L31 "Source code on GitHub")

Given I have a database uri named {}

Type: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)

##### Parameters

*   `uri` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** the key of the connection string

##### Examples

```javascript
SQLITE: sqlite://:memory:/ or sqlite:///path/to/database.sqlite
  MSSQL: Server=localhost\MSSQLSERVER01;Database=master;Trusted_Connection=True
  MYSQL: mysql://root:root@localhost:3306/test
  POSTGRES: postgres://postgres:postgres@localhost:5432/test
  MARIADB: mariadb://root:root@localhost:3306/test
  REDSHIFT: postgres://root:root@localhost:5432/test
  SNOWFLAKE: snowflake://root:root@localhost:5432/test
```

#### GET_TABLE_KEYS

[packages/db/src/index.ts:36-36](https://github.com/albertolerda/restroom-mw/blob/8bcf193be31549f8b5764f826d90bc30406c8b1a/packages/db/src/index.ts#L36-L36 "Source code on GitHub")

Given I have a database table named {}

Type: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)

##### Parameters

*   `key` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** of the table in data/keys

#### GET_RECORD

[packages/db/src/index.ts:44-44](https://github.com/albertolerda/restroom-mw/blob/8bcf193be31549f8b5764f826d90bc30406c8b1a/packages/db/src/index.ts#L44-L44 "Source code on GitHub")

Given I read the record {} of the table {} of the database {} and save the result into {}

Type: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)

##### Parameters

*   `record` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** name of the field (row)
*   `table` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** keyName of the table
*   `database` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** keyName of the database
*   `output` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** the variable to save the output

#### EXECUTE_SQL

[packages/db/src/index.ts:52-52](https://github.com/albertolerda/restroom-mw/blob/8bcf193be31549f8b5764f826d90bc30406c8b1a/packages/db/src/index.ts#L52-L52 "Source code on GitHub")

Given I execute the SQL statement named {} on the database named {} and save the result into {}

Type: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)

##### Parameters

*   `statement` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** name of the SQL statement
*   `database` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** keyName of the database
*   `output` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** the variable to save the output

#### EXECUTE_SQL_WITH_PARAMS

[packages/db/src/index.ts:63-63](https://github.com/albertolerda/restroom-mw/blob/8bcf193be31549f8b5764f826d90bc30406c8b1a/packages/db/src/index.ts#L63-L63 "Source code on GitHub")

**TBD**
Given I execute the SQL statement named {} pass the parameters named {} on the database named {} and save the result into {}

Type: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)

##### Parameters

*   `statement` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** name of the SQL statement
*   `parameters` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** name of the parameters
*   `database` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** keyName of the database
*   `output` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** the variable to save the output

#### SAVE_OUTPUT

[packages/db/src/index.ts:71-71](https://github.com/albertolerda/restroom-mw/blob/8bcf193be31549f8b5764f826d90bc30406c8b1a/packages/db/src/index.ts#L71-L71 "Source code on GitHub")

Then save the output into the database {} into the table {}

Type: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)

##### Parameters

*   `database` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** keyName of the database
*   `table` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** keyName of the table

#### SAVE_VAR

[packages/db/src/index.ts:79-79](https://github.com/albertolerda/restroom-mw/blob/8bcf193be31549f8b5764f826d90bc30406c8b1a/packages/db/src/index.ts#L79-L79 "Source code on GitHub")

Then save the {} into the database {} into the table {}

Type: [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)

##### Parameters

*   `output` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** the variable to save the output
*   `database` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** keyName of the database
*   `table` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)** keyName of the table
